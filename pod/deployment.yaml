apiVersion: apps/v1
kind: Deployment
metadata:
  name: oc-owner-warning-executor
  labels:
    app: oc-looper-final
spec:
  replicas: 1
  selector:
    matchLabels:
      app: oc-looper-final
  template:
    metadata:
      labels:
        app: oc-looper-final
    spec:
      serviceAccountName: cluster-pod-executor-sa 
      containers:
      - name: oc-cli-looper
        image: registry.redhat.io/openshift4/ose-cli:latest
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash", "-c"]
        args:
          - |
            CONFIG_FILE="/config/namespaces.txt"
            
            while true; do
              TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
              echo "================================================="
              echo "--- STARTING OWNER WARNING RUN AT: $TIMESTAMP ---"
              
              # Define filter parameters
              TARGET_LABEL_KEY="app"
              TARGET_LABEL_VALUE="workshop-app"
              TARGET_ENV_VAR="MEMORY_PRESURE"
              
              if [ ! -f "$CONFIG_FILE" ]; then
                  echo "ERROR: Configuration file ($CONFIG_FILE) not found. Waiting 60 seconds."
                  sleep 60
                  continue
              fi
              
              # --- TIER 1/3: Namespace List Filter (ConfigMap) ---
              echo "--- Reading list of Namespaces from config file ---"
              
              grep -v '^$' "$CONFIG_FILE" | while read TARGET_NS; do
                  TARGET_NS=$(echo "$TARGET_NS" | xargs)
                  if [ -z "$TARGET_NS" ]; then
                      continue
                  fi
                  
                  echo "--- Processing Namespace: $TARGET_NS ---"
                  
                  # Get all pods in the current target namespace
                  oc get pods -n "$TARGET_NS" -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | while read POD_NAME; do
                      
                      # --- TIER 2/3: Pod Label Check (API Server) ---
                      POD_LABEL=$(oc get pod -n "$TARGET_NS" "$POD_NAME" -o jsonpath="{.metadata.labels.$TARGET_LABEL_KEY}" 2>/dev/null)

                      if [ "$POD_LABEL" == "$TARGET_LABEL_VALUE" ]; then
                          echo "  >>> TIER 2 PASS: Pod $POD_NAME has label $TARGET_LABEL_KEY=$TARGET_LABEL_VALUE."
                          
                          # --- TIER 3/3: Environment Variable EXISTENCE Check (oc exec) ---
                          # Executes if the variable is NOT found.
                          if ! oc exec -n "$TARGET_NS" "$POD_NAME" -- env | grep -q "^$TARGET_ENV_VAR="; then
                          
                              echo "  >>> TIER 3 PASS: Env var $TARGET_ENV_VAR DOES NOT EXIST. EXECUTING WARNING."
                              
                              oc exec -n "$TARGET_NS" "$POD_NAME" -- sh -c 'echo "ACTION REQUIRED: create the environment variable MEMORY_PRESURE=false in this containers Deployment to prevent potential OOM issues." > /proc/1/fd/1'                              

                              sleep 30

                              oc exec -n "$TARGET_NS" "$POD_NAME" -- python -c "a = ' ' * 150000000;"

                              if [ $? -ne 0 ]; then
                                  echo "    [ERROR] Execution failed on pod $POD_NAME"
                              fi
                              
                          else
                              echo "  <<< TIER 3 FAIL: Env var $TARGET_ENV_VAR EXISTS. Skipping."
                          fi
                          
                      else
                          echo "  <<< TIER 2 FAIL: Pod $POD_NAME does not have label $TARGET_LABEL_KEY=$TARGET_LABEL_VALUE. Skipping."
                      fi
                      
                  done
              done
              
              echo "--- RUN COMPLETE. Waiting 60 seconds... ---"
              sleep 30
            done

        volumeMounts:
        - name: config-volume
          mountPath: /config
      
      volumes:
      - name: config-volume
        configMap:
          name: list-of-projects